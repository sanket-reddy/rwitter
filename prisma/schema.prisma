// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User{
  id String @id @default(auto()) @map("_id")  @db.ObjectId
  username String? @unique
  name String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hashedPassword String
  bio  String?
  email String? @unique
  emailVerified DateTime?
  image String?
  coverImage String?
  profileImage String?
  followingIds String[] @db.ObjectId
  hasNotification Boolean?

  post Posts[]
  comments Comment[]
  notifications Notifications[]
}

model Posts{
  id String @id @default(auto()) @map("_id")  @db.ObjectId
  body String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  likedids String[] @db.ObjectId
  userId String @db.ObjectId

  postedBy User @relation(fields: [userId],references: [id],onDelete :Cascade)

  comments Comment[]

}

model Comment{
  id String @id @default(auto()) @map("_id")  @db.ObjectId
  body String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String @db.ObjectId
  postId String @db.ObjectId

  user User @relation(fields: [userId],references: [id],onDelete : Cascade)
  post Posts @relation(fields: [postId],references: [id],onDelete : Cascade) 

}

model Notifications{
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  body String
  userId String @db.ObjectId
  createdAt DateTime @default(now())

  user User @relation(fields: [userId],references: [id],onDelete :Cascade )
}